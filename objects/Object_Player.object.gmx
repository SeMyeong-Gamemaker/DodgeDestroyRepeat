<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Player_Key_W = false;
Player_Key_A = false;
Player_Key_S = false;
Player_Key_D = false;

Player_Move_Friction = 0.2;
Player_Move_Rotation = 5;
Player_Move_Speed = 0;
Player_Move_Speed_Add = 0.1;
Player_Move_Speed_Sub = 0.1;
Player_Move_Speed_Max = 5;
Player_Moving = false;
Player_Moving_Mouse = false;

Player_Weapon_Firing = false;
Player_Weapon_Number = 1;
Player_Weapon_Reloading = false;
Player_Weapon_1_Aim = 5;
Player_Weapon_1_Aim_Max = 5;
Player_Weapon_1_Burst = 1;
Player_Weapon_1_Delay = false;
Player_Weapon_1_Delay_Time = 10;
Player_Weapon_1_Round = 50;
Player_Weapon_1_Round_Max = 50;
Player_Weapon_1_Speed = 20;
Player_Weapon_1_Speed_Add = 0;
Player_Weapon_1_Reloading_Time = 150;
Player_Weapon_2_Aim = 2;
Player_Weapon_2_Aim_Max = 2;
Player_Weapon_2_Burst = 1;
Player_Weapon_2_Delay = false;
Player_Weapon_2_Delay_Time = 30;
Player_Weapon_2_Round = 4;
Player_Weapon_2_Round_Max = 4;
Player_Weapon_2_Speed = 15;
Player_Weapon_2_Speed_Add = 0.1;
Player_Weapon_2_Reloading_Time = 300;

mp_potential_settings( Player_Move_Rotation, 0, 0, false );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Player_Weapon_2_Delay = true
{
   Player_Weapon_2_Delay = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Player_Weapon_1_Delay = true
{
   Player_Weapon_1_Delay = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Player_Weapon_Reloading = true
{
   if Player_Weapon_Number = 1
   {
      Player_Weapon_Reloading = false;
      Player_Weapon_1_Round += Player_Weapon_1_Round_Max;
   }
   if Player_Weapon_Number = 2
   {
      Player_Weapon_Reloading = false;
      Player_Weapon_2_Round += Player_Weapon_2_Round_Max;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Player_Move_Speed &gt; Player_Move_Speed_Max { Player_Move_Speed = Player_Move_Speed_Max; }
if Player_Move_Speed &lt; 0 { Player_Move_Speed = 0; }

if mouse_check_button( mb_right )
{
   Player_Move_Speed += Player_Move_Speed_Add;
   Player_Moving_Mouse = true;
   image_angle = direction
   mp_potential_step( mouse_x, mouse_y, Player_Move_Speed, false );
   friction = 0;
   gravity = 0;
   gravity_direction = 0;
}
if not mouse_check_button( mb_right )
{
   Player_Move_Speed -= Player_Move_Speed_Sub;
   Player_Moving_Mouse = false;
   image_angle = point_direction( x, y, mouse_x, mouse_y );
   friction = Player_Move_Friction;
   if Object_System_Wave.System_Wave_Stage != 2
   {
      gravity = Object_System_Wave.System_Wave_Stage_Gravity;
      gravity_direction = Object_System_Wave.System_Wave_Stage_Gravity_Direction;
   }
   if Object_System_Wave.System_Wave_Stage = 2
   {
      gravity = Object_System_Wave.System_Wave_Stage_Gravity;
      gravity_direction = point_direction( x, y, room_width / 2, room_height / 2 );
   }
}
if mouse_check_button_released( mb_right )
{
   if x != mouse_x and y != mouse_y
   {
      motion_add( image_angle, Player_Move_Speed );
   }
}

if mouse_check_button( mb_left )
{
   if Player_Weapon_Reloading = false
   {
      if Player_Weapon_Number = 1
      {
         if Player_Weapon_1_Delay = false
         {
            if Player_Weapon_1_Round &gt;= Player_Weapon_1_Burst
            {
               Player_Weapon_1_Aim = random_range( -Player_Weapon_1_Aim_Max, Player_Weapon_1_Aim_Max );
               repeat( Player_Weapon_1_Burst )
               {
                  if Player_Weapon_1_Round &gt; 0
                  {
                     with( instance_create( x, y, Object_Projectile_Bullet_Player ) )
                     {
                        image_angle = Object_Player.image_angle + Object_Player.Player_Weapon_1_Aim;
                        motion_add( image_angle, Object_Player.Player_Weapon_1_Speed );
                     }
                     Player_Weapon_1_Round -= 1;
                  }
               }
               Player_Weapon_1_Delay = true;
               alarm[1] = Player_Weapon_1_Delay_Time;
            }
         }
      }
      if Player_Weapon_Number = 2
      {
         if Player_Weapon_2_Delay = false
         {
            if Player_Weapon_2_Round &gt;= Player_Weapon_2_Burst
            {
               Player_Weapon_2_Aim = random_range( -Player_Weapon_2_Aim_Max, Player_Weapon_2_Aim_Max );
               repeat( Player_Weapon_2_Burst )
               {
                  if Player_Weapon_2_Round &gt; 0
                  {
                     with( instance_create( x, y, Object_Projectile_Missile_Player ) )
                     {
                        Projectile_Target = 0;
                        Projectile_Target_Set = false;
                        image_angle = Object_Player.image_angle + Object_Player.Player_Weapon_2_Aim;
                     }
                     Player_Weapon_2_Round -= 1;
                  }
               }
               Player_Weapon_2_Delay = true;
               alarm[2] = Player_Weapon_2_Delay_Time;
            }
         }
      }
   }
}

if mouse_check_button_pressed( mb_middle )
{
   if Player_Weapon_Reloading = false
   {
      if Player_Weapon_Number = 1
      {
         if Player_Weapon_1_Round &lt; Player_Weapon_1_Round_Max
         {
            Player_Weapon_Reloading = true;
            Player_Weapon_1_Round = 0;
            Player_Weapon_1_Delay = false;
            alarm[0] = Player_Weapon_1_Reloading_Time;
         }
      }
      if Player_Weapon_Number = 2
      {
         if Player_Weapon_2_Round &lt; Player_Weapon_2_Round_Max
         {
            Player_Weapon_Reloading = true;
            Player_Weapon_2_Round = 0;
            Player_Weapon_2_Delay = false;
            alarm[0] = Player_Weapon_2_Reloading_Time;
         }
      }
   }
}

if Player_Weapon_Reloading = false
{
   if keyboard_check_pressed( ord('1') )
   {
      Player_Weapon_Number = 1;
   }
   if keyboard_check_pressed( ord('2') )
   {
      Player_Weapon_Number = 2;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext( sprite_index, -1, x, y, 1, 1, image_angle, Object_System_Colour.System_Colour_Object, 1 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
