<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>System_Score = 0;
System_Money = 0;
System_Hull = 100;
System_Wave_Clock = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Object_System_Wave.System_Wave_Delay = true
{
   System_Wave_Clock -= 1;
}

if System_Wave_Clock &lt; -Object_System_Wave.System_Wave_Time { System_Wave_Clock = 0; }
if Object_System_Wave.System_Wave_Delay = false { System_Wave_Clock = 0; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + 25, "SCORE : " + string( System_Score ), 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + 55, "MONEY : " + string( System_Money ), 0.8, 0.8, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + 80, "HULL : " + string( System_Hull ), 0.8, 0.8, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview - 75, "WAVE : " + string( Object_System_Wave.System_Wave ), 0.8, 0.8, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview - 50, "OBJECT DESTROYED : " + string( Object_System_Wave.System_Wave_Projectile_Destroyed ) + " / " + string( Object_System_Wave.System_Wave_Projectile ), 0.8, 0.8, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview - 25, "INCOMING " + string( instance_number( Object_Projectile_Parent ) ) + " OBJECTS", 0.8, 0.8, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );

if Object_System_Wave.System_Wave_Delay = true
{
   draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 + 150, "NEXT WAVE IN...", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
   draw_circle_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 + 300, 50, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, false );
   draw_line_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 + 300, view_xview + view_wview / 2 + lengthdir_x( 50, ( System_Wave_Clock / Object_System_Wave.System_Wave_Time ) * 360 + 90 ), view_yview + view_hview / 2 + 300 + lengthdir_y( 50, ( System_Wave_Clock / Object_System_Wave.System_Wave_Time ) * 360 + 90 ), Object_System_Colour.System_Colour, Object_System_Colour.System_Colour );
   draw_text_transformed_colour( view_xview + view_wview / 2 + lengthdir_x( 100, ( System_Wave_Clock / Object_System_Wave.System_Wave_Time ) * 360 + 90 ), view_yview + view_hview / 2 + 300 + lengthdir_y( 100, ( System_Wave_Clock / Object_System_Wave.System_Wave_Time ) * 360 + 90 ), string( ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 ), 1, 1, ( System_Wave_Clock / Object_System_Wave.System_Wave_Time ) * 360 , Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
   if Object_System_Colour.System_Colour_Hue != Object_System_Colour.System_Colour_Hue_Temp or Object_System_Colour.System_Colour_Saturation != Object_System_Colour.System_Colour_Saturation_Temp or Object_System_Colour.System_Colour_Value != Object_System_Colour.System_Colour_Value_Temp { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2, "WARPING", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
   if ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 &lt;= 10 and ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 &gt; 7.5
   {
      draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 225, "STAGE", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
      if Object_System_Wave.System_Wave_Stage = 0 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "HIGH ORBIT", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
      if Object_System_Wave.System_Wave_Stage = 1 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "LOW ORBIT", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
      if Object_System_Wave.System_Wave_Stage = 2 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "SMALL PLANET", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
   }
   if ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 &lt;= 7.5 and ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 &gt; 5
   {
      draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 225, "GRAVITY", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
      if Object_System_Wave.System_Wave_Stage_Gravity = 0 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "ZERO GRAVITY", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
      if Object_System_Wave.System_Wave_Stage_Gravity &gt; 0 and Object_System_Wave.System_Wave_Stage != 2 { draw_line_colour( view_xview + view_wview / 2 + lengthdir_x( -25, Object_System_Wave.System_Wave_Stage_Gravity_Direction ), view_yview + view_hview / 2 - 150 + lengthdir_y( -25, Object_System_Wave.System_Wave_Stage_Gravity_Direction ), view_xview + view_wview / 2 + lengthdir_x( 25, Object_System_Wave.System_Wave_Stage_Gravity_Direction ), view_yview + view_hview / 2 - 150 + lengthdir_y( 25, Object_System_Wave.System_Wave_Stage_Gravity_Direction ), Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object ); }
      if Object_System_Wave.System_Wave_Stage_Gravity &gt; 0 and Object_System_Wave.System_Wave_Stage = 2 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "CENTER", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
   }
   if ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 &lt;= 5 and ( Object_System_Wave.System_Wave_Time + System_Wave_Clock ) / 60 &gt; 2.5
   {
      draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 225, "OBJECTS", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 );
      if Object_System_Wave.System_Wave &lt;= 5 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "SMALL MISSILE", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
      if Object_System_Wave.System_Wave &gt; 5 and Object_System_Wave.System_Wave &lt;= 10 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "SMALL, MEDIUM MISSILE", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
      if Object_System_Wave.System_Wave &gt; 10 and Object_System_Wave.System_Wave &lt;= 15 { draw_text_transformed_colour( view_xview + view_wview / 2, view_yview + view_hview / 2 - 175, "SMALL, MEDIUM MISSILE, SMALL ASTEROID", 1, 1, 0, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, Object_System_Colour.System_Colour_Object, 1 ); }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
